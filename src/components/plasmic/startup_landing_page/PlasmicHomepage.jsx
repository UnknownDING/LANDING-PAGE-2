// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d6ErvozvBGFxYbXbEWuKWB
// Component: 3JPIyJ-0oyoEB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsyNc23PHjZdNb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YNc23PHj_ZdNB/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_startup_landing_page.module.css"; // plasmic-import: d6ErvozvBGFxYbXbEWuKWB/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 3JPIyJ-0oyoEB/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: sKXsys3JSuAGA/icon
import svgBlacKsvgAFaYpHfley from "./images/svgBlacKsvg.svg"; // plasmic-import: AFaYpHFLEY/picture
import btcLogOpng28F851Dn22 from "./images/btcLogOpng2.png"; // plasmic-import: 8F851DN22/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array("link");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyNc23PHjZdNb()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerSliderSection"}
            data-plasmic-override={overrides.headerSliderSection}
            className={classNames(projectcss.all, sty.headerSliderSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__u1WNv)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8Okkp)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kC6PK)}
                  displayHeight={"default"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"76px"}
                  src={{
                    src: svgBlacKsvgAFaYpHfley,
                    fullWidth: 140,
                    fullHeight: 150,
                    aspectRatio: 0.935238
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lrQZz)}
                >
                  <p.Stack
                    as={"a"}
                    data-plasmic-name={"httpsdiscordcom"}
                    data-plasmic-override={overrides.httpsdiscordcom}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.httpsdiscordcom
                    )}
                    href={"https://discord.com/"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsdiscordcom"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "uFxwZaIwO",
                                  componentUuid: "3JPIyJ-0oyoEB",
                                  argName: "destination"
                                },
                                () => "https://discord.com/"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "uFxwZaIwO",
                                componentUuid: "3JPIyJ-0oyoEB"
                              },
                              () =>
                                (({ destination }) => {
                                  location.assign(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToHttpsdiscordcom"] === "object" &&
                        typeof $steps["goToHttpsdiscordcom"].then === "function"
                      ) {
                        $steps["goToHttpsdiscordcom"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "uFxwZaIwO",
                            componentUuid: "3JPIyJ-0oyoEB"
                          },
                          $steps["goToHttpsdiscordcom"]
                        );
                      }
                    }}
                    target={"_blank"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hoQqb)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eVoyU
                      )}
                    >
                      {"$STPI"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__eKwlF)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yngX8
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___1Aig1)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2J1Tt
                      )}
                    >
                      {"Rewards Breakdown"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__wJwPp)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___8AU6
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__jl7NC)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hknv
                      )}
                    >
                      {"ranking"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___5OJao)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___2XumJ
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__buYrs)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5EeYg
                      )}
                    >
                      {"dex"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___4GX4B)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={"a"}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___6CygY
                    )}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__gUapw)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"connect"}
                      data-plasmic-override={overrides.connect}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.connect
                      )}
                    >
                      {"CONNECT"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__rUybG)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mwS2Q)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___5ZhY
                      )}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4O3Yr
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kepN
                        )}
                      >
                        {"Log in"}
                      </div>
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__v6Ei)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jhBqs)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nuqAe)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__vCt5X
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  "This header tells people why\n they should use your product."
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"First Hold2Earn protocol on"}
                    </span>
                    <React.Fragment>{" BRC-20 bite"}</React.Fragment>
                  </React.Fragment>
                )}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kGcha
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  "This is text giving an overview of the features section. Double-click anywhere on the text to edit it's contents."
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Step into the realm of "}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FF8C00" }}
                    >
                      {"SATOSPIRATION"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {
                        " where the power of HODLing is not just a strategy, but a rewarding journey. Join us, hold "
                      }
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FF8C00" }}
                    >
                      {"$STPI"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {" and let your investment work for you!"}
                    </span>
                  </React.Fragment>
                )}
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ej2Tn)}>
            <div className={classNames(projectcss.all, sty.freeBox__py2A2)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oPemo)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ktzkv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zfTZw)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nQnq)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy3"}
                        data-plasmic-override={overrides.copy3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy3)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lv3AA
                          )}
                        >
                          <h3
                            data-plasmic-name={"h3"}
                            data-plasmic-override={overrides.h3}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              "Trusted by thousands of companies"
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 900, color: "#FFFFFF" }}
                                >
                                  {"What is Satospiration?"}
                                </span>
                              </React.Fragment>
                            )}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__itoo0
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 800, color: "#1E1E1E" }}
                              >
                                {
                                  "SATOSPIRATION ($STPI) is a unique hold-to-earn crypto project rewarding its holders with a share of its revenue. In the spirit of Bitcoin's creator, Satoshi Nakamoto, $STPI incentivizes long-term holding and is set to launch a Decentralized Exchange (DEX) for token swaps. As a $STPI holder, you earn more over time through direct rewards and transaction fees from the DEX. In essence, with SATOSPIRATION, holding equals earning!"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                  <div
                    data-plasmic-name={"art3"}
                    data-plasmic-override={overrides.art3}
                    className={classNames(projectcss.all, sty.art3)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__wbeF)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "220px"
                          : "399px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: btcLogOpng28F851Dn22,
                        fullWidth: 5000,
                        fullHeight: 5000,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__a56Il)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sp1Py)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___6UXay
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is a final call-to-\naction header"
                  : "Curious for more?"}
              </h2>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ghKh)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__jtmhK
                  )}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___2SARy)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qxDMq
                    )}
                  >
                    {"How Satospiration works ?"}
                  </div>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__qigiX)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSliderSection",
    "httpsdiscordcom",
    "connect",
    "button",
    "copy3",
    "h3",
    "art3"
  ],

  headerSliderSection: [
    "headerSliderSection",
    "httpsdiscordcom",
    "connect",
    "button"
  ],

  httpsdiscordcom: ["httpsdiscordcom"],
  connect: ["connect"],
  button: ["button"],
  copy3: ["copy3", "h3"],
  h3: ["h3"],
  art3: ["art3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSliderSection: makeNodeComponent("headerSliderSection"),
    httpsdiscordcom: makeNodeComponent("httpsdiscordcom"),
    connect: makeNodeComponent("connect"),
    button: makeNodeComponent("button"),
    copy3: makeNodeComponent("copy3"),
    h3: makeNodeComponent("h3"),
    art3: makeNodeComponent("art3"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
